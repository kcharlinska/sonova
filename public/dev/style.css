/*!
 * FrontBox Style 0.0.3
 * Bartosz Piwek
 * https://github.com/BartoszPiwek/FrontBox-Style
 */
/*
Variables

Organize values using variables map and easy-to-read functions or mixins.

Style guide: Variables
*/
/*
Breakpoints

[Default](https://github.com/BartoszPiwek/FrontBox-Style/blob/master/src/variables/breakpoints.scss) breakpoints screen map.
> Declaration can be overwrite by own breakpoints.

Usage:
// $breakpoints : { 
// 		[key: string]: { 
// 			name: string; 
// 			size: number 
// 		}
// }
$breakpoints : { 
	mobile: (
		name: sm,
		size: 576
	),
	tablet: (
		name: md,
		size: 1000
	),
}

Style guide: Variables.breakpoints
*/
/*
Color

Get color value.<br>
Function `color` return index value from `$colors` map.

Function:
// $valueIndex: string
color($valueIndex);

Usage:
// $colors : { 
// 	[key: string]: string
// }
$colors: (
  primary: blue,
  secondary: red
);
.element {
	background: color('primary');
}

Markup: color.html

Style guide: Variables.color
*/
/*
Index

Get index value for property `z-index`.<br>
Function `index` return index value from `$indexes` map.

Function:
// $id: string
index($id);

Usage:
// $indexes : { 
// 	[key: string]: number
// }
$indexes: (
	first: 1,
	last: -1
);
.element {
	z-index: index('first');
}

Markup: index.html

Style guide: Variables.Index
*/
/*
Media

Wrap code in breakpoint screen.

Mixins `media` (min-width) and `media-max` (max-width) take parameter `$name` to wrap code in media query.

> `$name` is variable map name inside `$breakpoints` map ([go to section](section-variables.html#variables-breakpoints)).

Function:
// $index: string;
@include media($index) {}
@include media-max($index) {}

Usage:
.element {
	@include media(tablet) {
		color: red;
	}
	@include media-max(tablet) {
		display: none;
	}
}

Markup: media.html

Style guide: Variables.media
*/
/*
Functions

Resolve common problems with SCSS preprocessor.

Style guide: Functions
*/
/*
Map deep get

Fetch deeply nested values from a map.

Function:
// $deep-map: { 
// 		[key: string]: { 
// 			...
// 		}
// }
// $keys: string[]
map-deep-get($deep-map, $keys...);

Usage:
$deep-map: (
  "first": (
    value: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
  ),
  "second": (
    value: "Fusce non orci elit.",
  ),
);
element {
 &:before {
   content: "[#]{map-deep-get($deep-map, first, value)}";
 }
}

Markup: map-deep-get.html

Styleguide: Functions.Map deep get
*/
/*
Modules

Change element behaviors.

Style guide: Modules
*/
/*
Click Expand

Expand click space using pseudo element `before` with prepared class `click-expand`.

Function:
// $space : numberPixel
@include click-expand($space);

Usage:
// $space : numberPixel
.link {
	@include click-expand(20px);
}

HTML:
<a href="#" class="expand-link link"></a>

Markup: click-expand.html

Style guide: Modules.Click expand
*/
/*
Fixed

Change to position fixed on iOS Safari while scrolling

Style guide: Fix.fixed
*/
.header.js_sticky .header__content {
  position: fixed;
  /* stylelint-disable-next-line */
  -webkit-transform: translateZ(0);
  transform: translate3d(0, 0, 0);
  transform: translateZ(0);
  /* stylelint-disable-next-line */
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  /* stylelint-disable-next-line */
  -webkit-perspective: 1000;
  perspective: 1000; }

/*
Hover

Style states `:hover`, `:active` and `:focus`.

Set flag `$canParentTrigger` to create trigger hover class `&--hover` for any parent element. 

> States only trigger for non touch devices.

Function:
// $canParentTrigger : boolean : false
@include hover($canParentTrigger) {};

Usage:
.selector {
 @include hover(true) {
  color: red;
 };
}

HTML:
<div>
	<span class="selector"></span>
</div>
<div class="selector--hover">
	<span class="selector"></span>
</div>

Markup: hover.html

Style guide: Modules.Hover
*/
/*
Scrollbar

Style browser scrollbar.

Function:
// $size : numberPixel
// $color-background : string
// $color-thumb : string
@include scrollbar($size, $color-background, $color-thumb);

Usage:
.scrollbar {
	@include scrollbar(20px, #000, #FFF);
}

HTML:
<div class="scollbar"></div>

Markup: scrollbar.html

Style guide: Modules.Scrollbar
*/
/*
Layout

Style guide: Layout
*/
/*
Grid

Grid system based on the flex display property.

Include style form columns and rows.

Usage:
.wrap {
	@extend %grid-style;
}

Style guide: Layout.Grid
*/
.row {
  display: flex;
  position: relative;
  flex-direction: row;
  flex-wrap: wrap;
  width: 100%; }
  .row > * {
    display: flex;
    position: relative;
    flex-direction: column;
    flex-grow: 0;
    flex-shrink: 0;
    height: auto !important;
    min-height: 1px; }

/*
Columns

Generate `col` classes.

Parameter `$grid-breakpoints` on default is [$breakpoints](section-variables.html#variables-breakpoints).

> Responsive classes has automatic generated using [responsive](section-functions.html#functions-responsive) mixin.

Function:
// $grid-count : number
// $grid-breakpoints? : $breakpoints
@include grid($grid-count, $breakpoints?);

Usage:
@include grid(12);

Markup: grid.html

Style guide: Layout.Grid.Columns
*/
/*
Space

Create space between element children's.

Function:
// $space-horizontal : numberPixel
// $space-vertical-y : numberPixel? : $space-horizontal
space-x($space-horizontal);
space-y($space-vertical);
space($space-horizontal, $space-vertical);

Usage:
.space {
 @include space(20px, 10px);
}
.space-x {
 @include space-x(20px);
}
.space-y {
 @include space-y(10px);
}

Markup: space.html

Style guide: Layout.space
*/
/*
Wrap

Crete wrapper element to hold content in specific width with optional aside space.

Function:
// $max-width : pixels
// $$space-aside? : pixels
wrap($max-width, $space-aside);

Usage:
.wrap {
	@extend %wrap-style;
	@include wrap(1024px, 20px);
}

Style:
@extend %wrap-style;

Markup: wrap.html

Style guide: Layout.wrap
*/
.wrap {
  width: 100%;
  margin-right: auto;
  margin-left: auto; }

/*
Group 

Center elements in content.

Usage:
.group {
	@extend %group-style;
}

Markup: group.html

Style guide: Layout.group
*/
.group {
  display: inline-flex;
  flex-direction: row;
  flex-wrap: nowrap;
  align-items: center; }

/*
Styles

Styles for selectors/classes.

Style guide: Styles
*/
/* stylelint-disable property-no-vendor-prefix */
/* stylelint-disable selector-no-qualifying-type */
/*
Browser reset

Set of CSS rules that resets the styling of all HTML elements to a consistent baseline.
> Recommended for all projects!

Usage:
@include browser-reset-style;

Style guide: Styles.Browser reset
*/
/*
Clearfix

Prepared class `clearfix` to force an element self-clear its children.

Usage:
.clearfix {
 @extend %clearfix-style;
}

Markup: clearfix.html

Style guide: Styles.Clearfix
*/
/*
Generators

Create dynamic code.

Style guide: Generators
*/
/*
Responsive

Create responsive classes with breakpoint name prefix. 

Parameter `$breakpoints-array` on default is [$breakpoints](section-variables.html#variables-breakpoints).

Function:
// $breakpoints-array? : $breakpoints
responsive($breakpoints-array?);

Usage:
@include responsive {
	@at-root .color-red {
		color: red;
	}
}

HTML:
<div class="md_color-red">Color red</div>

Markup: responsive.html

Style guide: Generators.Responsive
*/
/*
Utility count

Create responsive classes for content. 
Generated name selectors will have prefixed with breakpoint name and underscore.

Function:
responsive($breakpoints-array);

Arguments:
$breakpoints-array : { [key: string]: number }? : $breakpoints

Usage:
@include responsive {
	.foo {}	
}

OutputCSS:
.foo {}
@media screen and (min-width: 576px) {
 .sm_foo {}
}
@media screen and (min-width: 768px) {
 .md_foo {}
}
// and so on

Style guide: Generators.Utility count
*/
/*
Shapes

Create CSS shapes.

Style guide: Shapes
*/
/*
Square

Responsive square shape based on element width.

Usage:
.square {
 @extend %square-style;
}

Markup: square.html

Style guide: Shapes.square
*/
.square {
  position: relative;
  width: 100%;
  height: 0;
  padding-bottom: 100%; }
  .square > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%; }

/*
Triangle

Create triangle shape.

Mixin `add-rectangle` create triangle.

Function:
// $width : numberPixel
// $height : numberPixel
// $position : 'up' | 'right' | 'down' | 'left'
// $color : string
@include add-triangle($width, $height, $position, $color);

Usage:
.triangle-up {
	@include add-triangle(20px, 20px, 'top', #000);
}

HTML:
<div class="triangle-up"></div>

Markup: triangle.html

Style guide: Shapes.Triangle
*/
/*
Circle

Responsive circle shape based on element width.

Child element will be centered on axis xy.

Usage: 
.circle {
  @extend %circle-style;
}

Markup: circle.html

Style guide: Shapes.circle
*/
/*
Rectangle

Responsive rectangle shape based on element width.

Mixin `add-rectangle` create width to height ratio.

Function:
// $width: number
// $height: number
@include add-rectangle($width, $height);

Usage:
.rectangle {
 @extend %rectangle-style;
 @include add-rectangle(16, 9);
}

Markup: rectangle.html

Style guide: Shapes.Rectangle
*/
*,
*:after,
*:before {
  box-sizing: border-box;
  margin: 0;
  padding: 0; }

html {
  -webkit-text-size-adjust: 100%;
  -webkit-touch-callout: none; }

body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

iframe {
  border: 0; }

ol,
ul {
  list-style: none; }

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit; }

a {
  display: inline;
  color: inherit;
  text-decoration: none; }

iframe {
  border: 0; }

table {
  border-spacing: 0; }

/* Form Elements */
[type="text"]::-ms-clear, [type="text"]::-ms-reveal {
  display: none;
  width: 0;
  height: 0; }

[type="number"] {
  -moz-appearance: textfield; }

[type="checkbox"],
[type="radio"] {
  position: absolute !important;
  bottom: 0 !important;
  left: 50% !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  overflow: hidden !important;
  clip: rect(0 0 0 0) !important;
  border: 0 !important;
  white-space: nowrap !important;
  -webkit-clip-path: inset(50%) !important;
  clip-path: inset(50%) !important; }

[type="button"],
[type="reset"],
[type="submit"],
button {
  border: 0;
  background: 0 0;
  cursor: pointer;
  -webkit-appearance: button; }

label [for] {
  cursor: pointer; }

address {
  font-style: normal; }

/*!
 * FrontBox Static 0.0.2
 * Bartosz Piwek
 * https://github.com/BartoszPiwek/FrontBox-Static
 */
html,
body {
  width: 100%; }

body {
  position: relative;
  overflow-x: hidden;
  overflow-y: auto; }

.footer {
  margin-top: auto; }

.col-1 {
  flex-basis: 8.33333%;
  max-width: 8.33333%; }

.pull-1 {
  right: 8.33333% !important; }

.push-1 {
  left: 8.33333% !important; }

.col-2 {
  flex-basis: 16.66667%;
  max-width: 16.66667%; }

.pull-2 {
  right: 16.66667% !important; }

.push-2 {
  left: 16.66667% !important; }

.col-3 {
  flex-basis: 25%;
  max-width: 25%; }

.pull-3 {
  right: 25% !important; }

.push-3 {
  left: 25% !important; }

.col-4 {
  flex-basis: 33.33333%;
  max-width: 33.33333%; }

.pull-4 {
  right: 33.33333% !important; }

.push-4 {
  left: 33.33333% !important; }

.col-5 {
  flex-basis: 41.66667%;
  max-width: 41.66667%; }

.pull-5 {
  right: 41.66667% !important; }

.push-5 {
  left: 41.66667% !important; }

.col-6 {
  flex-basis: 50%;
  max-width: 50%; }

.pull-6 {
  right: 50% !important; }

.push-6 {
  left: 50% !important; }

.col-7 {
  flex-basis: 58.33333%;
  max-width: 58.33333%; }

.pull-7 {
  right: 58.33333% !important; }

.push-7 {
  left: 58.33333% !important; }

.col-8 {
  flex-basis: 66.66667%;
  max-width: 66.66667%; }

.pull-8 {
  right: 66.66667% !important; }

.push-8 {
  left: 66.66667% !important; }

.col-9 {
  flex-basis: 75%;
  max-width: 75%; }

.pull-9 {
  right: 75% !important; }

.push-9 {
  left: 75% !important; }

.col-10 {
  flex-basis: 83.33333%;
  max-width: 83.33333%; }

.pull-10 {
  right: 83.33333% !important; }

.push-10 {
  left: 83.33333% !important; }

.col-11 {
  flex-basis: 91.66667%;
  max-width: 91.66667%; }

.pull-11 {
  right: 91.66667% !important; }

.push-11 {
  left: 91.66667% !important; }

.col-12 {
  flex-basis: 100%;
  max-width: 100%; }

.pull-12 {
  right: 100% !important; }

.push-12 {
  left: 100% !important; }

@media screen and (min-width: 576px) {
  .sm_col-1 {
    flex-basis: 8.33333%;
    max-width: 8.33333%; }
  .sm_pull-1 {
    right: 8.33333% !important; }
  .sm_push-1 {
    left: 8.33333% !important; }
  .sm_col-2 {
    flex-basis: 16.66667%;
    max-width: 16.66667%; }
  .sm_pull-2 {
    right: 16.66667% !important; }
  .sm_push-2 {
    left: 16.66667% !important; }
  .sm_col-3 {
    flex-basis: 25%;
    max-width: 25%; }
  .sm_pull-3 {
    right: 25% !important; }
  .sm_push-3 {
    left: 25% !important; }
  .sm_col-4 {
    flex-basis: 33.33333%;
    max-width: 33.33333%; }
  .sm_pull-4 {
    right: 33.33333% !important; }
  .sm_push-4 {
    left: 33.33333% !important; }
  .sm_col-5 {
    flex-basis: 41.66667%;
    max-width: 41.66667%; }
  .sm_pull-5 {
    right: 41.66667% !important; }
  .sm_push-5 {
    left: 41.66667% !important; }
  .sm_col-6 {
    flex-basis: 50%;
    max-width: 50%; }
  .sm_pull-6 {
    right: 50% !important; }
  .sm_push-6 {
    left: 50% !important; }
  .sm_col-7 {
    flex-basis: 58.33333%;
    max-width: 58.33333%; }
  .sm_pull-7 {
    right: 58.33333% !important; }
  .sm_push-7 {
    left: 58.33333% !important; }
  .sm_col-8 {
    flex-basis: 66.66667%;
    max-width: 66.66667%; }
  .sm_pull-8 {
    right: 66.66667% !important; }
  .sm_push-8 {
    left: 66.66667% !important; }
  .sm_col-9 {
    flex-basis: 75%;
    max-width: 75%; }
  .sm_pull-9 {
    right: 75% !important; }
  .sm_push-9 {
    left: 75% !important; }
  .sm_col-10 {
    flex-basis: 83.33333%;
    max-width: 83.33333%; }
  .sm_pull-10 {
    right: 83.33333% !important; }
  .sm_push-10 {
    left: 83.33333% !important; }
  .sm_col-11 {
    flex-basis: 91.66667%;
    max-width: 91.66667%; }
  .sm_pull-11 {
    right: 91.66667% !important; }
  .sm_push-11 {
    left: 91.66667% !important; }
  .sm_col-12 {
    flex-basis: 100%;
    max-width: 100%; }
  .sm_pull-12 {
    right: 100% !important; }
  .sm_push-12 {
    left: 100% !important; } }

@media screen and (min-width: 768px) {
  .md_col-1 {
    flex-basis: 8.33333%;
    max-width: 8.33333%; }
  .md_pull-1 {
    right: 8.33333% !important; }
  .md_push-1 {
    left: 8.33333% !important; }
  .md_col-2 {
    flex-basis: 16.66667%;
    max-width: 16.66667%; }
  .md_pull-2 {
    right: 16.66667% !important; }
  .md_push-2 {
    left: 16.66667% !important; }
  .md_col-3 {
    flex-basis: 25%;
    max-width: 25%; }
  .md_pull-3 {
    right: 25% !important; }
  .md_push-3 {
    left: 25% !important; }
  .md_col-4 {
    flex-basis: 33.33333%;
    max-width: 33.33333%; }
  .md_pull-4 {
    right: 33.33333% !important; }
  .md_push-4 {
    left: 33.33333% !important; }
  .md_col-5 {
    flex-basis: 41.66667%;
    max-width: 41.66667%; }
  .md_pull-5 {
    right: 41.66667% !important; }
  .md_push-5 {
    left: 41.66667% !important; }
  .md_col-6 {
    flex-basis: 50%;
    max-width: 50%; }
  .md_pull-6 {
    right: 50% !important; }
  .md_push-6 {
    left: 50% !important; }
  .md_col-7 {
    flex-basis: 58.33333%;
    max-width: 58.33333%; }
  .md_pull-7 {
    right: 58.33333% !important; }
  .md_push-7 {
    left: 58.33333% !important; }
  .md_col-8 {
    flex-basis: 66.66667%;
    max-width: 66.66667%; }
  .md_pull-8 {
    right: 66.66667% !important; }
  .md_push-8 {
    left: 66.66667% !important; }
  .md_col-9 {
    flex-basis: 75%;
    max-width: 75%; }
  .md_pull-9 {
    right: 75% !important; }
  .md_push-9 {
    left: 75% !important; }
  .md_col-10 {
    flex-basis: 83.33333%;
    max-width: 83.33333%; }
  .md_pull-10 {
    right: 83.33333% !important; }
  .md_push-10 {
    left: 83.33333% !important; }
  .md_col-11 {
    flex-basis: 91.66667%;
    max-width: 91.66667%; }
  .md_pull-11 {
    right: 91.66667% !important; }
  .md_push-11 {
    left: 91.66667% !important; }
  .md_col-12 {
    flex-basis: 100%;
    max-width: 100%; }
  .md_pull-12 {
    right: 100% !important; }
  .md_push-12 {
    left: 100% !important; } }

@media screen and (min-width: 992px) {
  .lg_col-1 {
    flex-basis: 8.33333%;
    max-width: 8.33333%; }
  .lg_pull-1 {
    right: 8.33333% !important; }
  .lg_push-1 {
    left: 8.33333% !important; }
  .lg_col-2 {
    flex-basis: 16.66667%;
    max-width: 16.66667%; }
  .lg_pull-2 {
    right: 16.66667% !important; }
  .lg_push-2 {
    left: 16.66667% !important; }
  .lg_col-3 {
    flex-basis: 25%;
    max-width: 25%; }
  .lg_pull-3 {
    right: 25% !important; }
  .lg_push-3 {
    left: 25% !important; }
  .lg_col-4 {
    flex-basis: 33.33333%;
    max-width: 33.33333%; }
  .lg_pull-4 {
    right: 33.33333% !important; }
  .lg_push-4 {
    left: 33.33333% !important; }
  .lg_col-5 {
    flex-basis: 41.66667%;
    max-width: 41.66667%; }
  .lg_pull-5 {
    right: 41.66667% !important; }
  .lg_push-5 {
    left: 41.66667% !important; }
  .lg_col-6 {
    flex-basis: 50%;
    max-width: 50%; }
  .lg_pull-6 {
    right: 50% !important; }
  .lg_push-6 {
    left: 50% !important; }
  .lg_col-7 {
    flex-basis: 58.33333%;
    max-width: 58.33333%; }
  .lg_pull-7 {
    right: 58.33333% !important; }
  .lg_push-7 {
    left: 58.33333% !important; }
  .lg_col-8 {
    flex-basis: 66.66667%;
    max-width: 66.66667%; }
  .lg_pull-8 {
    right: 66.66667% !important; }
  .lg_push-8 {
    left: 66.66667% !important; }
  .lg_col-9 {
    flex-basis: 75%;
    max-width: 75%; }
  .lg_pull-9 {
    right: 75% !important; }
  .lg_push-9 {
    left: 75% !important; }
  .lg_col-10 {
    flex-basis: 83.33333%;
    max-width: 83.33333%; }
  .lg_pull-10 {
    right: 83.33333% !important; }
  .lg_push-10 {
    left: 83.33333% !important; }
  .lg_col-11 {
    flex-basis: 91.66667%;
    max-width: 91.66667%; }
  .lg_pull-11 {
    right: 91.66667% !important; }
  .lg_push-11 {
    left: 91.66667% !important; }
  .lg_col-12 {
    flex-basis: 100%;
    max-width: 100%; }
  .lg_pull-12 {
    right: 100% !important; }
  .lg_push-12 {
    left: 100% !important; } }

@media screen and (min-width: 1200px) {
  .xl_col-1 {
    flex-basis: 8.33333%;
    max-width: 8.33333%; }
  .xl_pull-1 {
    right: 8.33333% !important; }
  .xl_push-1 {
    left: 8.33333% !important; }
  .xl_col-2 {
    flex-basis: 16.66667%;
    max-width: 16.66667%; }
  .xl_pull-2 {
    right: 16.66667% !important; }
  .xl_push-2 {
    left: 16.66667% !important; }
  .xl_col-3 {
    flex-basis: 25%;
    max-width: 25%; }
  .xl_pull-3 {
    right: 25% !important; }
  .xl_push-3 {
    left: 25% !important; }
  .xl_col-4 {
    flex-basis: 33.33333%;
    max-width: 33.33333%; }
  .xl_pull-4 {
    right: 33.33333% !important; }
  .xl_push-4 {
    left: 33.33333% !important; }
  .xl_col-5 {
    flex-basis: 41.66667%;
    max-width: 41.66667%; }
  .xl_pull-5 {
    right: 41.66667% !important; }
  .xl_push-5 {
    left: 41.66667% !important; }
  .xl_col-6 {
    flex-basis: 50%;
    max-width: 50%; }
  .xl_pull-6 {
    right: 50% !important; }
  .xl_push-6 {
    left: 50% !important; }
  .xl_col-7 {
    flex-basis: 58.33333%;
    max-width: 58.33333%; }
  .xl_pull-7 {
    right: 58.33333% !important; }
  .xl_push-7 {
    left: 58.33333% !important; }
  .xl_col-8 {
    flex-basis: 66.66667%;
    max-width: 66.66667%; }
  .xl_pull-8 {
    right: 66.66667% !important; }
  .xl_push-8 {
    left: 66.66667% !important; }
  .xl_col-9 {
    flex-basis: 75%;
    max-width: 75%; }
  .xl_pull-9 {
    right: 75% !important; }
  .xl_push-9 {
    left: 75% !important; }
  .xl_col-10 {
    flex-basis: 83.33333%;
    max-width: 83.33333%; }
  .xl_pull-10 {
    right: 83.33333% !important; }
  .xl_push-10 {
    left: 83.33333% !important; }
  .xl_col-11 {
    flex-basis: 91.66667%;
    max-width: 91.66667%; }
  .xl_pull-11 {
    right: 91.66667% !important; }
  .xl_push-11 {
    left: 91.66667% !important; }
  .xl_col-12 {
    flex-basis: 100%;
    max-width: 100%; }
  .xl_pull-12 {
    right: 100% !important; }
  .xl_push-12 {
    left: 100% !important; } }

@media screen and (min-width: 1366px) {
  .hd_col-1 {
    flex-basis: 8.33333%;
    max-width: 8.33333%; }
  .hd_pull-1 {
    right: 8.33333% !important; }
  .hd_push-1 {
    left: 8.33333% !important; }
  .hd_col-2 {
    flex-basis: 16.66667%;
    max-width: 16.66667%; }
  .hd_pull-2 {
    right: 16.66667% !important; }
  .hd_push-2 {
    left: 16.66667% !important; }
  .hd_col-3 {
    flex-basis: 25%;
    max-width: 25%; }
  .hd_pull-3 {
    right: 25% !important; }
  .hd_push-3 {
    left: 25% !important; }
  .hd_col-4 {
    flex-basis: 33.33333%;
    max-width: 33.33333%; }
  .hd_pull-4 {
    right: 33.33333% !important; }
  .hd_push-4 {
    left: 33.33333% !important; }
  .hd_col-5 {
    flex-basis: 41.66667%;
    max-width: 41.66667%; }
  .hd_pull-5 {
    right: 41.66667% !important; }
  .hd_push-5 {
    left: 41.66667% !important; }
  .hd_col-6 {
    flex-basis: 50%;
    max-width: 50%; }
  .hd_pull-6 {
    right: 50% !important; }
  .hd_push-6 {
    left: 50% !important; }
  .hd_col-7 {
    flex-basis: 58.33333%;
    max-width: 58.33333%; }
  .hd_pull-7 {
    right: 58.33333% !important; }
  .hd_push-7 {
    left: 58.33333% !important; }
  .hd_col-8 {
    flex-basis: 66.66667%;
    max-width: 66.66667%; }
  .hd_pull-8 {
    right: 66.66667% !important; }
  .hd_push-8 {
    left: 66.66667% !important; }
  .hd_col-9 {
    flex-basis: 75%;
    max-width: 75%; }
  .hd_pull-9 {
    right: 75% !important; }
  .hd_push-9 {
    left: 75% !important; }
  .hd_col-10 {
    flex-basis: 83.33333%;
    max-width: 83.33333%; }
  .hd_pull-10 {
    right: 83.33333% !important; }
  .hd_push-10 {
    left: 83.33333% !important; }
  .hd_col-11 {
    flex-basis: 91.66667%;
    max-width: 91.66667%; }
  .hd_pull-11 {
    right: 91.66667% !important; }
  .hd_push-11 {
    left: 91.66667% !important; }
  .hd_col-12 {
    flex-basis: 100%;
    max-width: 100%; }
  .hd_pull-12 {
    right: 100% !important; }
  .hd_push-12 {
    left: 100% !important; } }

@media screen and (min-width: 1440px) {
  .whd_col-1 {
    flex-basis: 8.33333%;
    max-width: 8.33333%; }
  .whd_pull-1 {
    right: 8.33333% !important; }
  .whd_push-1 {
    left: 8.33333% !important; }
  .whd_col-2 {
    flex-basis: 16.66667%;
    max-width: 16.66667%; }
  .whd_pull-2 {
    right: 16.66667% !important; }
  .whd_push-2 {
    left: 16.66667% !important; }
  .whd_col-3 {
    flex-basis: 25%;
    max-width: 25%; }
  .whd_pull-3 {
    right: 25% !important; }
  .whd_push-3 {
    left: 25% !important; }
  .whd_col-4 {
    flex-basis: 33.33333%;
    max-width: 33.33333%; }
  .whd_pull-4 {
    right: 33.33333% !important; }
  .whd_push-4 {
    left: 33.33333% !important; }
  .whd_col-5 {
    flex-basis: 41.66667%;
    max-width: 41.66667%; }
  .whd_pull-5 {
    right: 41.66667% !important; }
  .whd_push-5 {
    left: 41.66667% !important; }
  .whd_col-6 {
    flex-basis: 50%;
    max-width: 50%; }
  .whd_pull-6 {
    right: 50% !important; }
  .whd_push-6 {
    left: 50% !important; }
  .whd_col-7 {
    flex-basis: 58.33333%;
    max-width: 58.33333%; }
  .whd_pull-7 {
    right: 58.33333% !important; }
  .whd_push-7 {
    left: 58.33333% !important; }
  .whd_col-8 {
    flex-basis: 66.66667%;
    max-width: 66.66667%; }
  .whd_pull-8 {
    right: 66.66667% !important; }
  .whd_push-8 {
    left: 66.66667% !important; }
  .whd_col-9 {
    flex-basis: 75%;
    max-width: 75%; }
  .whd_pull-9 {
    right: 75% !important; }
  .whd_push-9 {
    left: 75% !important; }
  .whd_col-10 {
    flex-basis: 83.33333%;
    max-width: 83.33333%; }
  .whd_pull-10 {
    right: 83.33333% !important; }
  .whd_push-10 {
    left: 83.33333% !important; }
  .whd_col-11 {
    flex-basis: 91.66667%;
    max-width: 91.66667%; }
  .whd_pull-11 {
    right: 91.66667% !important; }
  .whd_push-11 {
    left: 91.66667% !important; }
  .whd_col-12 {
    flex-basis: 100%;
    max-width: 100%; }
  .whd_pull-12 {
    right: 100% !important; }
  .whd_push-12 {
    left: 100% !important; } }

.click-expand:before {
  width: calc(100% + 20px);
  height: calc(100% + 20px); }

.wrap {
  max-width: 1054px;
  padding-right: 15px;
  padding-left: 15px; }

.space {
  width: calc(100% + 20px);
  margin-left: -20px;
  margin-bottom: -10px; }
  .space > * {
    padding-left: 20px; }
  .space > * {
    padding-bottom: 10px; }
  .space-x {
    width: calc(100% + 20px);
    margin-left: -20px; }
    .space-x > * {
      padding-left: 20px; }

video {
  width: 100%; }

/*
Button

Clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality

.btn-block - Set full width of a parent element
.btn-disable - Set button state to disabled and reset pseudo-classes style

Markup:
a(class="btn {{modifier_class}}") Anchor element

Style guide: Components.Button
*/
.btn {
  display: inline-block;
  position: relative;
  box-sizing: border-box;
  padding: 14px 6px;
  transition: background-color 0.2s, color 0.2s, border-color 0.2s, transform 0.2s;
  border: 0;
  border-radius: 5px;
  background-color: #05386b;
  color: #fff;
  font-size: 14px;
  letter-spacing: 0.4px;
  text-align: center;
  cursor: pointer;
  user-select: none;
  -webkit-user-drag: none; }
  .btn .icon {
    transition: transform 0.2s; }
  .btn:active {
    transform: translateY(1px); }
  .btn-block {
    display: block;
    width: 100% !important;
    max-width: 100% !important; }
  .btn-disable, .btn[disabled] {
    transform: none !important;
    cursor: not-allowed; }
    .btn-disable:before, .btn[disabled]:before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: inherit;
      opacity: 0.6;
      background: #000;
      pointer-events: none; }
  @media (hover: hover) {
    .btn:hover, .btn:active, .btn:focus {
      background-color: #053666; } }

/*
Colors

.btn--primary - color
.btn--secondary - color
.btn--success - color
.btn--danger - color
.btn--warning - color
.btn--info - color
.btn--light - color
.btn--dark - color

Markup:
a(class="btn {{modifier_class}}") Anchor element

Style guide: Components.Button.colors
*/
.btn--primary {
  background-color: #05386b; }
  @media (hover: hover) {
    .btn--primary:hover, .btn--primary:active, .btn--primary:focus {
      background-color: #053667; } }

/*
Size

.btn--large - size
.btn--wide - size
.btn--big - size
.btn--medium - size
.btn--small - size
.btn--tiny - size

Markup:
a(class="btn {{modifier_class}}") Anchor element

Style guide: Components.Button.size
*/
.row--footer {
  width: calc(100% + 20px);
  margin-left: -20px;
  margin-bottom: -20px; }
  .row--footer > * {
    padding-left: 20px; }
  .row--footer > * {
    padding-bottom: 20px; }

.footer {
  padding: 35px 0;
  overflow: hidden;
  background-color: #05386b; }
  .footer__item > *:first-child {
    margin-top: 0; }
  .footer__item > *:last-child {
    margin-bottom: 0; }
  .footer__title {
    margin: 20px 0;
    color: #fff;
    font-size: 28px;
    font-weight: 200; }
  .footer__content {
    color: #000;
    font-size: 16px; }

/* Addon mixin - style element when status is active */
/*
Tools

Contains: row

Style guide: Header.tools
*/
.row-header-space {
  width: calc(100% + 25px);
  margin-left: -25px;
  margin-bottom: -20px; }
  .row-header-space > * {
    padding-left: 25px; }
  .row-header-space > * {
    padding-bottom: 20px; }

.header {
  position: relative;
  height: 90px; }
  .header__content {
    position: absolute;
    z-index: 8000;
    top: 0;
    left: 0;
    width: 100%;
    padding: 20px 0;
    transition: height 0.2s, box-shadow 0.2s, background-color 0.2s, padding 0.2s;
    background-color: #05386b;
    box-shadow: 0 5px 10px 0 rgba(0, 0, 0, 0); }
  .header.js_sticky .header__content {
    padding: 10px 0;
    box-shadow: 0 5px 10px 0 rgba(0, 0, 0, 0.6); }
  @media screen and (min-width: 768px) {
    .header {
      height: 90px; } }
  @media screen and (min-width: 992px) {
    .header {
      height: 90px; } }

/**
 * Default style
 */
.icon {
  transition: fill 0.2s; }

.js_expand__container--active {
  height: 100% !important; }

.js_expand__container--close {
  height: 0 !important; }

.js_transition {
  transition: height 0.2s, width 0.2s; }

/*
Links

Style guide: Component.Links
*/
.overlay {
  position: fixed;
  z-index: -1;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  pointer-events: none; }
  .overlay--default:before {
    content: "";
    display: block;
    position: absolute;
    z-index: -1;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.5;
    background-color: #05386b; }
  .overlay--side:before, .overlay--side:after {
    content: "";
    display: block;
    position: absolute;
    z-index: -1;
    left: 0;
    width: 100%;
    height: 100px;
    opacity: 0.5;
    background: linear-gradient(0deg, rgba(5, 56, 107, 0) 0, #05386b 100%); }
  .overlay--side:after {
    top: 0; }
  .overlay--side:before {
    bottom: 0;
    transform: rotate(180deg); }
  .overlay.active {
    z-index: 1;
    pointer-events: all !important; }

.h2 {
  margin: 20px 0;
  font-size: 20px;
  font-weight: 500; }

.js_cookies-information {
  position: fixed;
  z-index: 6999;
  bottom: 0;
  left: 0;
  width: 100%;
  padding: 8px 0;
  transition: transform 0.2s, opacity 0.2s;
  border-top: 2px solid #05386b;
  opacity: 1;
  background-color: rgba(5, 56, 107, 0.9);
  box-shadow: 0 -5px 10px 0 rgba(0, 0, 0, 0.6); }
  .js_cookies-information__img {
    display: none; }
    @media screen and (min-width: 768px) {
      .js_cookies-information__img {
        display: block;
        position: absolute;
        bottom: 0;
        left: 0;
        width: 65px;
        height: 67px; } }
  .js_cookies-information__text {
    color: #fff;
    font-size: 14px;
    text-align: justify; }
  .js_cookies-information__container {
    position: relative;
    padding-right: 40px; }
    @media screen and (min-width: 768px) {
      .js_cookies-information__container {
        padding-left: 80px; } }
  .js_cookies-information-exit {
    position: absolute;
    top: 0;
    right: 0;
    cursor: pointer; }
    .js_cookies-information-exit:before {
      width: calc(100% + 20px);
      height: calc(100% + 20px); }
    .js_cookies-information-exit__icon {
      width: 20px;
      height: 20px;
      transition: transform 0.2s; }
      .js_cookies-information-exit__icon:before, .js_cookies-information-exit__icon:after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 100%;
        height: 2px;
        transform-origin: left top;
        background-color: #fff; }
      .js_cookies-information-exit__icon:before {
        transform: rotate(45deg) translate(-50%, -50%); }
      .js_cookies-information-exit__icon:after {
        transform: rotate(-45deg) translate(-50%, -50%); }
    @media (hover: hover) {
      .js_cookies-information-exit:hover .js_cookies-information-exit__icon, .js_cookies-information-exit:active .js_cookies-information-exit__icon, .js_cookies-information-exit:focus .js_cookies-information-exit__icon {
        transform: rotate(90deg); } }
  .js_cookies-information--hide {
    transform: translate(0, 100%);
    opacity: 0; }

#js_check-scrollbar {
  position: fixed;
  z-index: -1;
  width: 40px;
  height: 40px;
  overflow-y: scroll;
  opacity: 0; }

.js_scrollbar-active .js_cookies-information, .js_scrollbar-active body {
  border-right: var(--scrollbarWidth, 0) solid #05386b; }

html.js_scroll-lock {
  position: fixed; }
  html.js_scroll-lock body {
    overflow: hidden; }

html:not(.js_scroll-lock) body {
  top: 0 !important; }

.js_cookies-information {
  position: fixed;
  z-index: 6999;
  bottom: 0;
  left: 0;
  width: 100%;
  padding: 8px 0;
  transition: transform 0.2s, opacity 0.2s;
  border-top: 2px solid #05386b;
  opacity: 1;
  background-color: rgba(5, 56, 107, 0.9);
  box-shadow: 0 -5px 10px 0 rgba(0, 0, 0, 0.6); }
  .js_cookies-information__img {
    display: none; }
    @media screen and (min-width: 768px) {
      .js_cookies-information__img {
        display: block;
        position: absolute;
        bottom: 0;
        left: 0;
        width: 65px;
        height: 67px; } }
  .js_cookies-information__text {
    color: #fff;
    font-size: 14px;
    text-align: justify; }
  .js_cookies-information__container {
    position: relative;
    padding-right: 40px; }
    @media screen and (min-width: 768px) {
      .js_cookies-information__container {
        padding-left: 80px; } }
  .js_cookies-information-exit {
    position: absolute;
    top: 0;
    right: 0;
    cursor: pointer; }
    .js_cookies-information-exit:before {
      width: calc(100% + 20px);
      height: calc(100% + 20px); }
    .js_cookies-information-exit__icon {
      width: 20px;
      height: 20px;
      transition: transform 0.2s; }
      .js_cookies-information-exit__icon:before, .js_cookies-information-exit__icon:after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 100%;
        height: 2px;
        transform-origin: left top;
        background-color: #fff; }
      .js_cookies-information-exit__icon:before {
        transform: rotate(45deg) translate(-50%, -50%); }
      .js_cookies-information-exit__icon:after {
        transform: rotate(-45deg) translate(-50%, -50%); }
    @media (hover: hover) {
      .js_cookies-information-exit:hover .js_cookies-information-exit__icon, .js_cookies-information-exit:active .js_cookies-information-exit__icon, .js_cookies-information-exit:focus .js_cookies-information-exit__icon {
        transform: rotate(90deg); } }
  .js_cookies-information--hide {
    transform: translate(0, 100%);
    opacity: 0; }

#js_check-scrollbar {
  position: fixed;
  z-index: -1;
  width: 40px;
  height: 40px;
  overflow-y: scroll;
  opacity: 0; }

.js_scrollbar-active .js_cookies-information, .js_scrollbar-active body {
  border-right: var(--scrollbarWidth, 0) solid #05386b; }

html.js_scroll-lock {
  position: fixed; }
  html.js_scroll-lock body {
    overflow: hidden; }

html:not(.js_scroll-lock) body {
  top: 0 !important; }

@keyframes animation_name {
  0% { }
  25% { }
  50% { }
  75% { }
  100% { } }

@keyframes animation_name {
  from { }
  to { } }

:root {
  --scrollbarWidth: 0; }

body,
html {
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
  min-height: 100%;
  overflow-x: hidden;
  -webkit-font-smoothing: antialiased; }

body {
  background-color: #379683;
  color: #fff;
  font-family: Arial, Helmet, Freesans, sans-serif;
  font-size: 16px; }

.scrollbar::-webkit-scrollbar,
body::-webkit-scrollbar {
  width: 5px;
  height: 5px;
  background-color: #379683; }

.scrollbar::-webkit-scrollbar-thumb,
body::-webkit-scrollbar-thumb {
  min-width: 5px;
  max-height: 5px;
  background-color: #05386b; }

.scrollbar::-webkit-scrollbar-track,
body::-webkit-scrollbar-track {
  display: none; }

svg,
.icon {
  display: inline-block;
  width: 16px;
  height: 16px;
  overflow: visible;
  transition: color 0.2s;
  fill: currentColor;
  color: currentColor;
  vertical-align: middle;
  pointer-events: none; }

img {
  max-width: 100%;
  height: auto;
  image-rendering: optimizeQuality; }

* {
  touch-action: manipulation; }

.page {
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
  margin: 25px 0; }

.background {
  pointer-events: none;
  user-select: none; }

/*
SECTION Input

Example:
<div class="input" tabindex="0">
	<input id="input-default" name="input-default" required="required" tabindex="-1">
	<label class="input__label" for="input-default">
		<span class="input__input"></span>
		<span class="input__text">
			Label
		</span>
	</label>
</div>

Style guide: Forms.input-default
*/
.input {
  position: relative; }
  .input input {
    position: absolute !important;
    bottom: 0 !important;
    left: 50% !important;
    width: 1px !important;
    height: 1px !important;
    padding: 0 !important;
    overflow: hidden !important;
    clip: rect(0 0 0 0) !important;
    border: 0 !important;
    white-space: nowrap !important;
    /* stylelint-disable-next-line */
    -webkit-clip-path: inset(50%) !important;
    clip-path: inset(50%) !important; }
    .input input:disabled + .input-radio__label {
      opacity: 0.4;
      pointer-events: none;
      user-select: none; }
    .input input:checked + .input__label .input__input {
      /* Style for using SVG for checkbox element mark */
      /* Style for using color fill for checkbox element mark */ }
      .input input:checked + .input__label .input__input--mark-icon .input__mark {
        opacity: 1; }
      .input input:checked + .input__label .input__input--mark-color:before {
        opacity: 1; }
  .input__input {
    position: absolute;
    top: 0;
    left: 0;
    width: 20px;
    height: 20px;
    transition: border-color 0.2s;
    border: 1px solid #05386b; }
    .input__input--mark-color:before {
      content: "";
      position: absolute;
      top: 5%;
      left: 5%;
      width: 90%;
      height: 90%;
      transition: opacity 0.2s, background-color 0.2s;
      opacity: 0;
      background-color: #05386b; }
  .input__mark {
    position: absolute;
    top: 10%;
    left: 10%;
    width: 80%;
    height: 80%;
    transition: opacity 0.2s, fill 0.2s;
    opacity: 0;
    fill: #05386b; }
  .input__label {
    display: block;
    padding-left: 30px;
    cursor: pointer; }
    @media (hover: hover) {
      .input__label:hover .input-checkbox__input, .input__label:active .input-checkbox__input, .input__label:focus .input-checkbox__input {
        border-color: #000; } }

/*
SECTION Checkbox

Example: 
<div class="input input-checkbox" tabindex="0">
	<input type="checkbox" id="checkbox1" name="checkbox1" required="required" tabindex="-1">
		<label class="input__label" for="checkbox1">
		<span class="input__input"></span>
		<span class="input__text">
			Label
		</span>
	</label>
</div>

<div class="input input-checkbox" tabindex="0">
	<input type="checkbox" id="checkbox2" name="checkbox2" required="required" tabindex="-1">
	<label class="input__label" for="checkbox2">
		<span class="input__input input__input--mark-icon">
			<svg class="input__mark" viewBox="0 0 512 512"><path d="M256 0C114.615 0 0 114.615 0 256s114.615 256 256 256 256-114.615 256-256S397.385 0 256 0zm-48 416L102 278l47-49 59 75 185-151 23 23-208 240z"></path></svg>
		</span>
		<span class="input__text">
			Label
		<span>
	</label>
</div>

<div class="input input-checkbox" tabindex="0">
	<input type="checkbox" id="checkbox3" name="checkbox3" required="required" tabindex="-1">
	<label class="input__label" for="checkbox3">
		<span class="input__input input__input--mark-color"></span>
		<span class="input__text">
			Label
		<span>
	</label>
</div>

Style guide: Forms.input-checkbox
*/
/*
SECTION Radio

Example: 
<div class="input input-radio" tabindex="0">
	<input type="radio" id="radio-default" name="input-radio" required="required" tabindex="-1">
	<label class="input__label" for="radio-default">
		<span class="input__input"></span>
		<span class="input__text">Label<span>
	</label>
</div>

<div class="input input-radio" tabindex="0">
	<input type="radio" id="radio-mark-color" name="input-radio" required="required" tabindex="-1">
	<label class="input__label" for="radio-mark-color">
		<span class="input__input input__input--mark-color"></span>
		<span class="input__text">
			Label
		<span>
	</label>
</div>

<div class="input input-radio" tabindex="0">
	<input type="radio" id="radio-mark-icon" name="input-radio" required="required" tabindex="-1">
	<label class="input__label" for="radio-mark-icon">
		<span class="input__input input__input--mark-icon">
			<svg class="input__mark" viewBox="0 0 512 512"><path d="M256 0C114.615 0 0 114.615 0 256s114.615 256 256 256 256-114.615 256-256S397.385 0 256 0zm-48 416L102 278l47-49 59 75 185-151 23 23-208 240z"></path></svg>
		</span>
		<span class="input__text">
			Label
		<span>
	</label>
</div>



Style guide: Forms.input-radio
*/
.input-radio .input__input {
  border-radius: 50%; }
  .input-radio .input__input--mark-color:before {
    border-radius: 50%; }

/*
SECTION Text

Example:
<input type="text" class="input-text" required="required">

Style guide: Forms.input-text
*/
.input-text {
  width: 100%;
  height: 38px;
  padding: 4px 12px;
  transition: border-color 0.2s, color 0.2s;
  border: 1px solid #05386b;
  border-radius: 8px;
  color: #05386b;
  font-size: 18px; }
  .input-text:hover {
    border-color: rgba(0, 0, 0, 0.6);
    color: rgba(0, 0, 0, 0.6); }
  .input-text:active, .input-text:focus {
    border-color: #000;
    color: #000; }
  .input-text--block {
    display: block;
    width: 100%; }

/**
  * Input group
**/
.input-group > .input-group__item {
  position: relative;
  margin-bottom: 10px; }
  .input-group > .input-group__item:last-child {
    margin-bottom: 0; }

.input-group--block .input-group__item > * {
  display: block;
  width: 100%; }

.form {
  position: relative;
  padding: 10px; }
  .form__response-content {
    position: absolute;
    z-index: -1;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transition: opacity 0.2s, opacity 0.2s 0.2s;
    opacity: 0; }
  .form__response {
    position: absolute;
    z-index: -1;
    top: 50%;
    left: 50%;
    width: auto;
    transform: translate(-50%, -50%);
    transition: opacity 0.2s, opacity 0.2s 0.2s;
    opacity: 0; }
    .form__response--msg {
      width: 100%;
      font-size: 16px;
      font-weight: 700;
      text-align: center; }

/**
 * JavaScript form class 
*/
.js_form--run .form__content {
  opacity: 0.3;
  pointer-events: none;
  user-select: none;
  filter: blur(2px); }

.js_form--run .form__response-content {
  z-index: 1;
  opacity: 1; }

.js_form--wait .form__response--wait {
  z-index: 1;
  opacity: 1; }

.js_form--msg .form__response--msg {
  z-index: 1;
  opacity: 1; }

/*
Hero

Markup:
<div class="hero">
  <div class="hero__wrapper">
    <div class="wrap">
        <header class="hero__header">
          <h1 class="hero__title">Hero Title</h1>
        </header>
        <div class="hero__body">Hero body</div>
        <footer class="hero__footer">Hero footer</footer>
    </div>
  </div>
</div>

Mix class:
.height-full

Style guide: Elements.hero
*/
.hero {
  position: relative;
  background-repeat: no-repeat;
  background-position: center center;
  background-size: cover;
  background-attachment: fixed;
  /* Modifications */ }
  .hero__wrapper {
    padding: 100px 0; }
  .hero__header {
    margin-bottom: 50px; }
  .hero__body {
    margin: 50px 0;
    font-size: 30px; }
  .hero__footer {
    margin-top: 50px;
    font-size: 22px; }
  .hero__title {
    font-size: 45px; }
  .hero--primary {
    height: calc(100vh - 90px);
    height: calc(100vh - var(--vh-offset, 0px) - 90px);
    display: flex;
    align-items: center;
    background-color: #05386b;
    background-image: url(""); }
    .hero--primary > * {
      flex: 1 1 auto; }

/*
Logo

Style guide: Common.logo
*/
.logo {
  display: flex;
  align-items: center;
  justify-content: center; }
  .logo__img {
    width: 50px;
    height: 50px; }
  .logo__text {
    margin-left: 10px;
    font-size: 18px; }

.list__item {
  color: #fff; }

.list--same-size .list__item {
  flex: 1 0 auto !important; }

.list--dot > .list__item {
  position: relative;
  padding-left: 20px; }
  .list--dot > .list__item:before {
    content: '';
    display: block;
    position: absolute;
    top: 4px;
    left: 0;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: #05386b; }

.list--dot.list--horizontal > .list__item:before {
  left: 8px; }

/*
Vertical

Markup:
<div class="hideable">
	<ul class="list list--horizontal space-x list--dot">
		<li class="list__item">List item</li>
		<li class="list__item">List item</li>
		<li class="list__item">List item</li>
	</ul>
</div>

Style guide: List.vertical
*/
.list--vertical {
  margin-bottom: -14px; }
  .list--vertical > * {
    padding-bottom: 14px; }

.list--horizontal {
  width: calc(100% + 26px);
  margin-left: -26px;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap; }
  .list--horizontal > * {
    padding-left: 26px; }
  .list--horizontal .list__item {
    display: inline-block;
    flex: 0 1 auto; }

.nav-header-menu > .nav-header-menu__item {
  display: block;
  margin-bottom: 20px;
  padding: 10px 6px;
  transition: color 0.2s;
  color: #000;
  text-align: center; }
  .nav-header-menu > .nav-header-menu__item:last-child {
    margin-bottom: 0 !important; }
  @media (hover: hover) {
    .nav-header-menu > .nav-header-menu__item:hover, .nav-header-menu > .nav-header-menu__item:active, .nav-header-menu > .nav-header-menu__item:focus {
      color: #05386b; } }

.table-scrollable {
  overflow-x: auto;
  overflow-y: hidden; }

.table {
  display: block;
  width: 680px;
  overflow-x: auto;
  border-collapse: separate; }

.wysiwyg > *:first-child {
  margin-top: 0 !important; }

.wysiwyg > *:last-child {
  margin-bottom: 0 !important; }

.wysiwyg pre {
  font-family: monospace; }

/*# sourceMappingURL=style.css.map */
